
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>  //Exact-width integer types
#include <math.h>
#include <ti\devices\msp432p4xx\driverlib\driverlib.h>  //Driver library

#define CLOCK_HF    48000000 //48MHz
#define CLOCK_LF    32000 //32kHz

#define TIMER0_FREQ   1  //unit: Hz

#define SAMPLE_FREQ    48000 //Frequency in Hz, common sampling rates for digital audio: 8000, 32000, 44100, 48000

#define RED_LED    GPIO_PIN0
#define GREEN_LED    GPIO_PIN1
#define BLUE_LED    GPIO_PIN2

#define NUM_DISP_TEXT_LINE    4
#define MAX_STR_BUFFER_LEN    100

//Function prototypes
void initDevice_HFXT(void);
void initGPIO(void);
void initTimer(void);
void initUART(void);
void uart0_transmitStr(const char *str);
void initADC14(void);
void ADC14_IRQHandler(void);

//Global variables
uint32_t clockMCLK, clockSMCLK;
uint8_t currentLED = RED_LED;
char strBuffer[MAX_STR_BUFFER_LEN];

const char *terminalDisplayText[NUM_DISP_TEXT_LINE] =
{
    "\r\n",
    "Scope Demo\r\n",
    "R: Red, G: Green, B: Blue, S: Sample, P: Stop Sample, H: Help\r\n",
    "> "
};

void main(void)
{
    bool flagTimerAon = false;
    uint32_t i;
    uint8_t data;

    initDevice_HFXT();
    initGPIO();
    initTimer();
    initUART();
    initADC14();
    ADC14_IRQHandler();

    Interrupt_enableMaster();
    Timer32_startTimer(TIMER32_0_BASE, false);

    // Initial display on terminal.
    for(i=0; i<NUM_DISP_TEXT_LINE; i++)
    {
        uart0_transmitStr(terminalDisplayText[i]);
    }
    while(1)
    {
        if(UART_getInterruptStatus(EUSCI_A0_BASE, EUSCI_A_UART_RECEIVE_INTERRUPT_FLAG))
        {
            data = UART_receiveData(EUSCI_A0_BASE);
            UART_clearInterruptFlag(EUSCI_A0_BASE, EUSCI_A_UART_RECEIVE_INTERRUPT_FLAG);

            switch(data)
            {
                case 'R':
                case 'r':
                    currentLED = RED_LED;
                    uart0_transmitStr("Blink red LED.\r\n> ");
                    break;

                case 'G':
                case 'g':
                    currentLED = GREEN_LED;
                    uart0_transmitStr("Blink green LED.\r\n> ");
                    break;

                case 'B':
                case 'b':
                    currentLED = BLUE_LED;
                    uart0_transmitStr("Blink blue LED.\r\n> ");
                    break;

                case 'H':
                case 'h':
                    for(i=0; i<NUM_DISP_TEXT_LINE; i++)
                    {
                        uart0_transmitStr(terminalDisplayText[i]);
                    }
                    break;
                case 'S':
                case 's':

                    if(flagTimerAon == false)
                    {
                       flagTimerAon = true;
                       Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
                       uart0_transmitStr("on \r\n> ");
                    }
                    break;
                case 'P':
                case 'p':
                    if(flagTimerAon)
                                       {
                                           flagTimerAon = false;
                                           Timer_A_stopTimer(TIMER_A0_BASE);
                                           uart0_transmitStr("off \r\n> ");
                                       }
                    break;
            }
        } //end of if
    } //end of while
}

void initDevice_HFXT(void)
{
    WDT_A_holdTimer();  //Stop watchdog timer

    //Change VCORE to 1 to support a frequency higher than 24MHz.
    //See data sheet for Flash wait-state requirement for a given frequency.
    PCM_setPowerState(PCM_AM_DCDC_VCORE1);
    FlashCtl_setWaitState(FLASH_BANK0, 1);
    FlashCtl_setWaitState(FLASH_BANK1, 1);

    FPU_enableModule();
    FPU_enableLazyStacking(); //Required to use FPU within ISR.

    //Configure PJ.2 and PJ.3 in HFXT mode.
    //Initialize external clock sources HFXT.
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_PJ, GPIO_PIN2|GPIO_PIN3, GPIO_PRIMARY_MODULE_FUNCTION);
    CS_setExternalClockSourceFrequency(CLOCK_LF, CLOCK_HF);
    CS_startHFXT(false);

    CS_initClockSignal(CS_MCLK, CS_HFXTCLK_SELECT, CS_CLOCK_DIVIDER_1);
    CS_initClockSignal(CS_HSMCLK, CS_HFXTCLK_SELECT, CS_CLOCK_DIVIDER_16);
    CS_initClockSignal(CS_SMCLK, CS_HFXTCLK_SELECT, CS_CLOCK_DIVIDER_1); //48MHz to support SPI

    clockMCLK = CS_getMCLK();
    clockSMCLK = CS_getSMCLK();
}

void initGPIO(void)
{
    //Configure P2.0, P2.1, P2.2 as output.
    //P2.0, P2.1, P2.2 are connected to a RGB tri-color LED on LaunchPad.
    GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN0|GPIO_PIN1|GPIO_PIN2);
}

//Timer_A continuous mode configuration
Timer_A_UpModeConfig upModeConfig =
{
        TIMER_A_CLOCKSOURCE_SMCLK,            //SMCLK clock source, 48MHz
        TIMER_A_CLOCKSOURCE_DIVIDER_1,
        0,                                   //timerPeriod, will set in program
        TIMER_A_TAIE_INTERRUPT_DISABLE,      //Disable timer ISR
        TIMER_A_CCIE_CCR0_INTERRUPT_DISABLE, //Disable CCR0 interrupt
        TIMER_A_DO_CLEAR                     //Clear counter
};

//Timer_A Compare Configuration Parameter
Timer_A_CompareModeConfig compareConfig =
{
        TIMER_A_CAPTURECOMPARE_REGISTER_1,          //Use CCR1
        TIMER_A_CAPTURECOMPARE_INTERRUPT_DISABLE,   //Disable CCR interrupt
        TIMER_A_OUTPUTMODE_SET_RESET,               //Toggle output
                                                    //compareValue, will set in program
};

void initTimer(void)
{
    // TIMER32_0 to blink heartbeat LED
    Timer32_initModule(TIMER32_0_BASE, TIMER32_PRESCALER_1, TIMER32_32BIT, TIMER32_PERIODIC_MODE);
    Timer32_setCount(TIMER32_0_BASE, clockMCLK/TIMER0_FREQ - 1);
    Timer32_enableInterrupt(TIMER32_0_BASE);
    Interrupt_enableInterrupt(INT_T32_INT1); //Enable Timer32_0 interrupt in the interrupt controller.


    //Configuring Timer_A to trigger ADC14
    upModeConfig.timerPeriod = clockSMCLK/SAMPLE_FREQ - 1;
    Timer_A_configureUpMode(TIMER_A0_BASE, &upModeConfig);
    compareConfig.compareValue = clockSMCLK/SAMPLE_FREQ - 2; //Set at 1 cycle before timer period.
    Timer_A_initCompare(TIMER_A0_BASE, &compareConfig);
}

void initUART(void)
{
    //Configuration for 48MHz SMCLK, 460800 baud rate.
    //Calculated using the online calculator that TI provides at:
    //http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSP430BaudRateConverter/index.html
    const eUSCI_UART_Config config =
    {
        EUSCI_A_UART_CLOCKSOURCE_SMCLK, //SMCLK Clock Source, 48MHz
        6, //BRDIV
        8, //UCxBRF
        32, //UCxBRS
        EUSCI_A_UART_NO_PARITY, //No Parity
        EUSCI_A_UART_LSB_FIRST, //MSB First
        EUSCI_A_UART_ONE_STOP_BIT, //One stop bit
        EUSCI_A_UART_MODE, //UART mode
        EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION //Oversampling
    };

    // Configure GPIO pins for UART. RX: P1.2, TX:P1.3.
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P1, GPIO_PIN2|GPIO_PIN3, GPIO_PRIMARY_MODULE_FUNCTION);

    UART_initModule(EUSCI_A0_BASE, &config);
    UART_enableModule(EUSCI_A0_BASE);
}

void initADC14(void)
{
    ADC14_enableModule();
    ADC14_initModule(ADC_CLOCKSOURCE_SMCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1, ADC_NOROUTE);
    ADC14_setResolution(ADC_14BIT);
    //Configure P4.0 and P4.2 as A14
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P4, GPIO_PIN0, GPIO_TERTIARY_MODULE_FUNCTION);

    ADC14_configureSingleSampleMode(ADC_MEM0, true);
    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_AVCC_VREFNEG_VSS, ADC_INPUT_A13, false);

    //See TechRef Section 20.2.6 for sample timing consideration.
    ADC14_enableSampleTimer(ADC_MANUAL_ITERATION);
    ADC14_setSampleHoldTime(ADC_PULSE_WIDTH_192, ADC_PULSE_WIDTH_192);
    ADC14_setSampleHoldTrigger(ADC_TRIGGER_SOURCE1, false);
    ADC14_enableConversion();
    ADC14_enableInterrupt(ADC_INT0); //Interrupt for ADC_MEM0
    Interrupt_enableInterrupt(INT_ADC14);
}

//Transmit a string through UART0.
void uart0_transmitStr(const char *str)
{
    uint32_t len, i=0;

    len = strlen(str);
    while(i < len)
    {
        UART_transmitData(EUSCI_A0_BASE, str[i++]);
        while(!UART_getInterruptStatus(EUSCI_A0_BASE, EUSCI_A_UART_TRANSMIT_COMPLETE_INTERRUPT_FLAG));
        UART_clearInterruptFlag(EUSCI_A0_BASE, EUSCI_A_UART_TRANSMIT_COMPLETE_INTERRUPT_FLAG);
    }
}

//Timer32_0 ISR
void T32_INT1_IRQHandler(void)
{
    Timer32_clearInterruptFlag(TIMER32_0_BASE);

    if(GPIO_getInputPinValue(GPIO_PORT_P2, GPIO_PIN0|GPIO_PIN1|GPIO_PIN2))
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0|GPIO_PIN1|GPIO_PIN2);
    }
    else
    {
        GPIO_setOutputHighOnPin(GPIO_PORT_P2, currentLED);
    }
}

void ADC14_IRQHandler(void)
{
    uint64_t status;
    float data;

    status = ADC14_getEnabledInterruptStatus();
    ADC14_clearInterruptFlag(status);

    if(status & ADC_INT0)
    {
        data = ADC14_getResult(ADC_MEM0);
        data = 3.3*data/0x3FFF; //converts voltage for output

        snprintf(strBuffer, MAX_STR_BUFFER_LEN, "P4.0 voltage = %.2f V\r\n> ", data);
        //outputs voltage through UART

        uart0_transmitStr(strBuffer);
    }
}
